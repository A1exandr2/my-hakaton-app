// NotificationService.EmailService/Services/EmailService.cs
using System.Net.Mail;
using NotificationService.Contracts.Messages;
using NotificationService.EmailService.Models;

namespace NotificationService.EmailService.Services;

public class EmailService : IEmailService, IDisposable
{
    private readonly SmtpSettings _smtpSettings;
    private readonly ISmtpClient _smtpClient;

    public EmailService(SmtpSettings smtpSettings, ISmtpClient smtpClient)
    {
        _smtpSettings = smtpSettings;
        _smtpClient = smtpClient;
    }

    public async Task SendAlertNotificationAsync(AlertNotification alert, CancellationToken cancellationToken = default)
    {
        foreach (var email in alert.Emails)
        {
            await SendSingleAlertAsync(email, alert, cancellationToken);
        }
    }

    private async Task SendSingleAlertAsync(string email, AlertNotification alert, CancellationToken cancellationToken)
    {
        var subject = alert.GetTitle();
        var body = GenerateAlertEmailBody(alert);

        var mailMessage = new MailMessage
        {
            From = new MailAddress(_smtpSettings.Username),
            Subject = subject,
            Body = body,
            IsBodyHtml = true
        };
        
        mailMessage.To.Add(email);

        await _smtpClient.SendMailAsync(mailMessage);
    }

    private string GenerateAlertEmailBody(AlertNotification alert)
    {
        var statusIcon = alert.IsSuccess ? "‚úÖ" : "üö®";
        var statusColor = alert.IsSuccess ? "green" : "red";
        
        return $@"
            <div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>
                <h2 style='color: {statusColor};'>{statusIcon} {alert.GetTitle()}</h2>
                
                <div style='background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 15px 0;'>
                    <p><strong>–°–µ—Ä–≤–µ—Ä:</strong> {alert.ServerHost}</p>
                    <p><strong>–ü—Ä–æ—Ç–æ–∫–æ–ª:</strong> {alert.Protocol}</p>
                    <p><strong>–í—Ä–µ–º—è:</strong> {alert.Timestamp:dd.MM.yyyy HH:mm:ss}</p>
                    
                    {(alert.IsSuccess ? 
                        $@"<p style='color: green;'><strong>–°—Ç–∞—Ç—É—Å:</strong> –°–µ—Ä–≤–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ</p>" :
                        $@"<p style='color: red;'><strong>–û—à–∏–±–∫–∞:</strong> {alert.ErrorMessage}</p>
                          <p><strong>–ö–æ–¥ –æ—à–∏–±–∫–∏:</strong> {alert.StatusCode}</p>")
                    }
                </div>

                <div style='margin-top: 20px; padding: 15px; background-color: #e9ecef; border-radius: 5px;'>
                    <p><strong>ID —Å–µ—Ä–≤–µ—Ä–∞:</strong> {alert.ServerId}</p>
                    <p><strong>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</strong> {string.Join(", ", alert.Emails)}</p>
                </div>

                <p style='color: #6c757d; font-size: 12px; margin-top: 20px;'>
                    –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. 
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ.
                </p>
            </div>
        ";
    }

    public void Dispose()
    {
        (_smtpClient as IDisposable)?.Dispose();
    }
}