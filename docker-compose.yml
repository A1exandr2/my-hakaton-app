services:
  backend:
    build:
      context: .
      dockerfile: src/Backend/Dockerfile
    ports:
      - "8080:80"  # внешний 8080 → внутренний 80
    environment:
      - ASPNETCORE_URLS=http://+:80
    restart: unless-stopped
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  frontend:
    build:
      context: .
      dockerfile: src/Frontend/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_BASE_URL=http://backend:8080  # ← снаружи доступен по 8080
      - NODE_ENV=production
      - PORT=3000
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - app-network

  notification-service:
    build:
      context: .
      dockerfile: src/DopModules/NotificationService/Dockerfile
    restart: unless-stopped
    depends_on:
      - backend
      - rabbitmq
    networks:
      - app-network

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
